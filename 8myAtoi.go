// 8. 字符串转换整数 (atoi)
// 请你来实现一个 atoi 函数，使其能将字符串转换成整数。

// 首先，该函数会根据需要丢弃无用的开头空格字符，直到寻找到第一个非空格的字符为止。接下来的转化规则如下：

// 如果第一个非空字符为正或者负号时，则将该符号与之后面尽可能多的连续数字字符组合起来，形成一个有符号整数。
// 假如第一个非空字符是数字，则直接将其与之后连续的数字字符组合起来，形成一个整数。
// 该字符串在有效的整数部分之后也可能会存在多余的字符，那么这些字符可以被忽略，它们对函数不应该造成影响。
// 注意：假如该字符串中的第一个非空格字符不是一个有效整数字符、字符串为空或字符串仅包含空白字符时，则你的函数不需要进行转换，即无法进行有效转换。

// 在任何情况下，若函数不能进行有效的转换时，请返回 0 。

// 提示：

// 本题中的空白字符只包括空格字符 ' ' 。
// 假设我们的环境只能存储 32 位大小的有符号整数，那么其数值范围为 [−231,  231 − 1]。如果数值超过这个范围，请返回  INT_MAX (231 − 1) 或 INT_MIN (−231) 。

// 示例 1:

// 输入: "42"
// 输出: 42
// 示例 2:

// 输入: "   -42"
// 输出: -42
// 解释: 第一个非空白字符为 '-', 它是一个负号。
//      我们尽可能将负号与后面所有连续出现的数字组合起来，最后得到 -42 。
// 示例 3:

// 输入: "4193 with words"
// 输出: 4193
// 解释: 转换截止于数字 '3' ，因为它的下一个字符不为数字。
// 示例 4:

// 输入: "words and 987"
// 输出: 0
// 解释: 第一个非空字符是 'w', 但它不是数字或正、负号。
//      因此无法执行有效的转换。
// 示例 5:

// 输入: "-91283472332"
// 输出: -2147483648
// 解释: 数字 "-91283472332" 超过 32 位有符号整数范围。
//      因此返回 INT_MIN (−231) 。
/*
执行用时 :4 ms, 在所有 Go 提交中击败了79.32%的用户
内存消耗 :3.5 MB, 在所有 Go 提交中击败了7.49%的用户


//*/
package main

import "fmt"

func main() {
	tmp_str := "-0012"
	fmt.Printf("%d\n", myAtoi(tmp_str))
}
func myAtoi(str string) int {

	var pn byte
	var num_s []int
	var num int
	var itr int = 0 //分为三个阶段，空白，数字，其他字符

	for _, v := range str {
		//第一阶段只能是空白

		if itr == 0 {
			//空白直接下一轮 空格ASCII位置32，
			if v == 32 {
				continue
			}

			//第一个正负号或者数字
			if v >= '0' && v <= '9' {
				num_s = append(num_s, int(v)-'0')
				itr = 1
				continue
			}
			if v == '-' || v == '+' {
				pn = byte(v)
				itr = 1
				continue
			} else {
				//先出现了数字正负号的其他字符，不然换，return 0.
				return 0
			}
		}
		//正负号已经存入，或没有正负号。进入数字阶段
		if itr == 1 {
			if v >= '0' && v <= '9' {
				num_s = append(num_s, int(v)-'0')

			} else {
				itr = 2
				break
			}
		}
	}
	if itr != 2 {
		fmt.Errorf("数据没有完整遍历")
	}
	for i := 0; i < len(num_s); i++ {
		if i == 0 {
			num = int(num_s[i])
			if pn == '-' {
				num = num * -1
			}
		}
		if pn == '-' {
			if num*10 <= -2147483648 {
				return -2147483648
			}
			if num == -214748364 && int(num_s[i]) > 8 {
				return -2147483648
			}
		} else {
			if num*10 >= 2147483647 {
				return 2147483647
			}
			if num == 214748364 && int(num_s[i]) > 7 {
				return 2147483647
			}

		}
		if i > 0 {
			if pn == '-' {
				num = num*10 - int(num_s[i])
			} else {
				num = num*10 + int(num_s[i])
			}
		}

	}

	return num
}
